import{p as n}from"./ProjectLayout-e2551fcc.js";import{d as a,o,b as r,w as t,e as s,p as c,g as d,h as e,_ as p}from"./index-45402e08.js";const g="/assets/opengl_q-3f27d34f.png",h="/assets/opengl_r-9a6e825f.png",m="/assets/opengl_s-c9068f06.png",f="/assets/opengl_t-02c5f70f.png",u="/assets/opengl_u-6446e618.png",x="/assets/opengl_v-447fad0e.png",i=l=>(c("data-v-274c15fd"),l=l(),d(),l),b=i(()=>e("div",{class:"bg-rabbit m-auto flex h-48 w-10/12 items-center justify-center bg-center",style:{"background-size":"contain"}},[e("div",{class:"absolute inset-0 h-72 bg-white bg-opacity-75"}),e("h1",{class:"text-opcity-100 relative text-5xl font-bold"},"OpenGL渲染器")],-1)),_=i(()=>e("p",{class:"break-words"},[s(" Visual Studio"),e("br"),s(" FreeGLUT ")],-1)),v=i(()=>e("div",{class:"max-w-4xl mx-auto px-4 py-8"},[e("h1",{class:"text-2xl font-bold text-center mb-8"},"File Introduction"),e("div",{class:"grid md:grid-cols-2 gap-8"},[e("div",{class:"bg-white shadow-lg rounded-lg p-6"},[e("h2",{class:"text-xl font-semibold mb-4"},"OBJ Files"),e("p",{class:"text-gray-700"},"Describes the structure of OBJ files, including:"),e("ul",{class:"list-disc list-inside text-gray-600"},[e("li",null,"Material library declarations (mtllib)"),e("li",null,"Vertex coordinates (v)"),e("li",null,"Texture coordinates (vt)"),e("li",null,"Vertex normals (vn)"),e("li",null,"Material usage (usemtl)"),e("li",null,"Face definitions (f) that comprise position, texture, and normal indices.")])]),e("div",{class:"bg-white shadow-lg rounded-lg p-6"},[e("h2",{class:"text-xl font-semibold mb-4"},"MTL Files"),e("p",{class:"text-gray-700"},"Outlines the format of MTL files, specifying:"),e("ul",{class:"list-disc list-inside text-gray-600"},[e("li",null,"New materials (newmtl)"),e("li",null,"Specular exponent (Ns)"),e("li",null,"Ambient (Ka)"),e("li",null,"Diffuse (Kd)"),e("li",null,"Specular (Ks) coefficients"),e("li",null,"Texture mapping (map_kd) for diffuse reflection.")])])]),e("div",{class:"mt-8"},[e("div",{class:"bg-white shadow-lg rounded-lg p-6"},[e("h2",{class:"text-xl font-semibold mb-4"},"Textures"),e("p",{class:"text-gray-700"},"Briefly mentions the role of 2D images (textures) in the rendering process.")])])],-1)),w=i(()=>e("div",{class:"max-w-6xl mx-auto px-4 py-8"},[e("div",{class:"mb-10"},[e("h2",{class:"text-2xl font-semibold mb-6"},"Process Overview"),e("ol",{class:"list-decimal list-inside space-y-4 text-lg"},[e("li",null,"Reading Files and Processing Objects into Triangles: The initial step involves reading the file and processing the objects into individual triangles."),e("li",null,"Entering Vertex Shader and Rasterizer: The process then moves into the vertex shader and rasterizer stages."),e("li",null,"Entering Fragment Shader with Phong Reflection Model: Finally, the fragment shader is applied, utilizing the Phong reflection model to achieve realistic lighting effects.")])]),e("div",null,[e("h2",{class:"text-2xl font-semibold mb-6"},"Detailed Process Steps"),e("div",{class:"bg-white shadow-lg rounded-lg p-6 mb-6"},[e("h3",{class:"text-xl font-semibold mb-4"},"Process A - Preparation"),e("p",{class:"mb-4"},"Reading material libraries, vertex coordinates (v), texture coordinates (vt), and vertex normals (vn). Converting faces (f) into vertices by their position, texture, and normal indices. If a face consists of more than three points, it is split into multiple triangles. Identifying the object's center and the longest edge across three dimensions. Normalizing each face's position around the object's center to values between -0.5 and 0.5.")]),e("div",{class:"bg-white shadow-lg rounded-lg p-6 mb-6"},[e("h3",{class:"text-xl font-semibold mb-4"},"Process B - Vertex Shader and Rasterization"),e("p",{class:"mb-4"},"Defining the Model-View-Projection (MVP) matrix to transform objects from object space to clip space. Implementing the vertex shader to convert object coordinates to clip space, interpolate positions, normals, and texture coordinates. Rasterization process interpolates the positions, textures, and normals of pixels within a triangle, discarding pixels outside the screen or obscured by other objects, leaving fragments for the fragment shader.")]),e("div",{class:"bg-white shadow-lg rounded-lg p-6"},[e("h3",{class:"text-xl font-semibold mb-4"},"Process C - Fragment Shader and Lighting"),e("p",null,"Defining methods for calculating diffuse and specular reflections. Calculating the effects of point lights, directional lights, and spotlights. Summing the effects of directed light sources and ambient light to determine the color of each fragment.")])])],-1)),y=i(()=>e("div",{class:"flex flex-col items-center justify-center"},[e("p",{class:"text-center text-xl"},"紅點是point light，黃點是spot light"),e("div",{class:"flex w-3/5 items-center justify-between py-12"},[e("img",{src:g,class:"h-1/5 w-2/5"}),e("img",{src:h,class:"h-1/5 w-2/5"})]),e("div",{class:"flex w-3/5 items-center justify-between py-12"},[e("img",{src:m,class:"h-1/5 w-2/5"}),e("img",{src:f,class:"h-1/5 w-2/5"})]),e("div",{class:"flex w-3/5 items-center justify-between py-12"},[e("img",{src:u,class:"h-1/5 w-2/5"}),e("img",{src:x,class:"h-1/5 w-2/5"})])],-1)),j=a({__name:"OpenGL",setup(l){return(S,P)=>(o(),r(n,null,{head:t(()=>[b]),target:t(()=>[s(" 在不同的光源中，渲染出3D物件的材質和紋理 ")]),author:t(()=>[s(" 吳昱霆教授、吳少森 ")]),environment:t(()=>[_]),language:t(()=>[s(" C++ ")]),free:t(()=>[v]),process:t(()=>[w]),result:t(()=>[y]),_:1}))}});const O=p(j,[["__scopeId","data-v-274c15fd"]]);export{O as default};
